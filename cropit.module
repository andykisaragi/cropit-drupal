<?php

function cropit_menu(){

/*
  $items['admin/config/cropit'] = array(
      'title' => 'Cropit',
      'description' => 'Configuration for Cropit module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cropit_admin_form'),
      'access arguments' => array('administer cropit'),
      'type' => MENU_NORMAL_ITEM,
    );
  $items['admin/config/cropit/settings'] = array(
      'title' => 'Cropit settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );*/

  $items['cropit/save_image'] = array(

      'title' => 'Cropit',
      'description' => '',
      'page callback' => 'cropit_save_file_from_datauri',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,

    );
  $items['cropit/preview_image/%'] = array(

      'title' => 'Cropit',
      'description' => 'Configuration for Cropit module',
      'page callback' => 'cropit_preview_image',
      'page arguments' => array(2),
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,

    );


  return $items;

}

function cropit_save_file_from_datauri(){

  // @todo: SECURITY!!!!!
  // could make the var name a hash of time perhaps?
  // hm but it would be visible in the js
  $encodedData = $_POST['data_uri'];

  $encodedData = substr($encodedData,strpos($encodedData,",")+1);

  $encodedData = str_replace(' ','+',$encodedData);
  $decodedData = base64_decode($encodedData);

  $files_path = file_directory_temp();

  // @todo - proper file name
  $filename = $_POST['filename'];

  // @todo - paths in field settings?
  // @todo - global path in module settings?
  $img_path = $files_path . '/' . $filename;
  
  $bytes = file_put_contents($img_path, $decodedData);

  $handle = fopen($img_path, 'r');
  $file = file_save_data($handle, 'public://' . $filename);
  fclose($handle);

  if($bytes && $file){
    print $file->fid;
  }else{
    print '0';
  }

  die();

}

function cropit_preview_image($fid){

  if(!is_numeric($fid)) die();

  $file = file_load($fid);

  print(file_create_url($file->uri));

  die();

}

function cropit_field_widget_info() {
  return array(
    'image_cropit' => array(
      'label' => t('Cropit'),
      'field types' => array('image'),
      'settings' => array(
        'preview_image_style' => 'thumbnail',
        'crop_width' => '300',
        'crop_height' => '150',
        ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}



function cropit_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  drupal_set_message(print_r($instance,true));

  drupal_add_js(array('cropit' => array(
    'width' => $instance['widget']['settings']['crop_width'],
    'height' => $instance['widget']['settings']['crop_height'],
  )
  ), 'setting');


  drupal_add_js('/sites/all/libraries/cropit/dist/jquery.cropit.min.js');
  drupal_add_css(drupal_get_path('module','cropit') . '/cropit.css');
  drupal_add_js(drupal_get_path('module','cropit') . '/cropit.js'); 
  
  $defaults = array(
    'fid' => 0,
    'display' => !empty($field['settings']['display_default']),
    'description' => '',
  );

  $element_info = element_info('managed_file');

  $element += array(
    
    //'#name' => 'files[' . implode('_', $element['#parents']) . ']',
    '#type' => 'file',
    //'#title' => t('Choose a file'),
    //'#title_display' => 'invisible',
    '#size' => 22,
    //'#theme_wrappers' => array('cropit_field_widget'),
    //'#theme' => 'cropit_field_widget',
    '#weight' => -10,
    '#attributes' => array(
      'class' => array('cropit-image-input')
    ),
    '#value_callback' => 'cropit_file_value',
    // Allows this field to return an array instead of a single value.
    '#extended' => TRUE,
    '#process' => array_merge($element_info['#process'], array('cropit_field_widget_process')),
    
  );


  if ($field['cardinality'] == 1) {
    // Set the default value.
    $element['#default_value'] = !empty($items) ? $items[0] : $defaults;
    // If there's only one field, return it as delta 0.
    if (empty($element['#default_value']['fid'])) {
      $element['#description'] = theme('file_upload_help', array(
        'description' => $element['#description'], 
        'upload_validators' => $element['#upload_validators']
      ));
    }
    $elements = array($element);
  }
  else {
    // If there are multiple values, add an element for each existing one.
    foreach ($items as $item) {
      $elements[$delta] = $element;
      $elements[$delta]['#default_value'] = $item;
      $elements[$delta]['#weight'] = $delta;
      $delta++;
    }
    // And then add one more empty row for new uploads except when this is a
    // programmed form as it is not necessary.
    if (($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || $delta < $field['cardinality']) && empty($form_state['programmed'])) {
      $elements[$delta] = $element;
      $elements[$delta]['#default_value'] = $defaults;
      $elements[$delta]['#weight'] = $delta;
      $elements[$delta]['#required'] = ($element['#required'] && $delta == 0);
    }
    // The group of elements all-together need some extra functionality
    // after building up the full list (like draggable table rows).
    $elements['#file_upload_delta'] = $delta;
    $elements['#theme'] = 'file_widget_multiple';
    $elements['#theme_wrappers'] = array('fieldset');
    $elements['#process'] = array('file_field_widget_process_multiple');
    $elements['#title'] = $element['#title'];
    $elements['#description'] = $element['#description'];
    $elements['#field_name'] = $element['#field_name'];
    $elements['#language'] = $element['#language'];
    $elements['#display_field'] = $field['settings']['display_field'];

    // Add some properties that will eventually be added to the file upload
    // field. These are added here so that they may be referenced easily through
    // a hook_form_alter().
    $elements['#file_upload_title'] = t('Add a new file');
    $elements['#file_upload_description'] = theme('file_upload_help', array('description' => '', 'upload_validators' => $elements[0]['#upload_validators']));
  }

  return $element;

}


/**
 * Implements hook_field_widget_settings_form().
 */
function cropit_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  // Use the file widget settings form.
  $form = file_field_widget_settings_form($field, $instance);

  $form['preview_image_style'] = array(
    '#title' => t('Preview image style'),
    '#type' => 'select',
    '#options' => image_style_options(FALSE, PASS_THROUGH),
    '#empty_option' => '<' . t('no preview') . '>',
    '#default_value' => $settings['preview_image_style'],
    '#description' => t('The preview image will be shown while editing the content.'),
    '#weight' => 15,
  );

  $form['crop_width'] = array(
    '#title' => t('Crop area width (px)'),
    '#type' => 'textfield',
    '#default_value' => $settings['crop_width'],
    '#description' => t('Width in pixels of the cropping area (and resulting image)'),
    '#weight' => 16,
  );
  $form['crop_height'] = array(
    '#title' => t('Crop area height (px)'),
    '#type' => 'textfield',
    '#default_value' => $settings['crop_height'],
    '#description' => t('Height in pixels of the cropping area (and resulting image)'),
    '#weight' => 17,
  );

  return $form;
}


/**
 * The #value_callback for a managed_file type element.
 */
function cropit_file_value(&$element, $input = FALSE, $form_state = NULL) {
  $fid = 0;
  $force_default = FALSE;

  // Find the current value of this field from the form state.
  $form_state_fid = $form_state['values'];
  foreach ($element['#parents'] as $parent) {
    $form_state_fid = isset($form_state_fid[$parent]) ? $form_state_fid[$parent] : 0;
  }

  if ($element['#extended'] && isset($form_state_fid['fid'])) {
    $fid = $form_state_fid['fid'];
  }
  elseif (is_numeric($form_state_fid)) {
    $fid = $form_state_fid;
  }

  // Process any input and save new uploads.
  if ($input !== FALSE) {
    $return = $input;


      // Check for #filefield_value_callback values.
      // Because FAPI does not allow multiple #value_callback values like it
      // does for #element_validate and #process, this fills the missing
      // functionality to allow File fields to be extended through FAPI.
      if (isset($element['#file_value_callbacks'])) {
        foreach ($element['#file_value_callbacks'] as $callback) {
          $callback($element, $input, $form_state);
        }
      }
      // If a FID was submitted, load the file (and check access if it's not a
      // public file) to confirm it exists and that the current user has access
      // to it.
      if (isset($input['fid']) && ($file = file_load($input['fid']))) {
        // By default the public:// file scheme provided by Drupal core is the
        // only one that allows files to be publicly accessible to everyone, so
        // it is the only one for which the file access checks are bypassed.
        // Other modules which provide publicly accessible streams of their own
        // in hook_stream_wrappers() can add the corresponding scheme to the
        // 'file_public_schema' variable to bypass file access checks for those
        // as well. This should only be done for schemes that are completely
        // publicly accessible, with no download restrictions; for security
        // reasons all other schemes must go through the file_download_access()
        // check.
        if (in_array(file_uri_scheme($file->uri), variable_get('file_public_schema', array('public'))) || file_download_access($file->uri)) {
          $fid = $file->fid;
        }
        // If the current user doesn't have access, don't let the file be
        // changed.
        else {
          $force_default = TRUE;
        }
      }
    
  }

  // If there is no input or if the default value was requested above, use the
  // default value.
  if ($input === FALSE || $force_default) {
    if ($element['#extended']) {
      $default_fid = isset($element['#default_value']['fid']) ? $element['#default_value']['fid'] : 0;
      $return = isset($element['#default_value']) ? $element['#default_value'] : array('fid' => 0);
    }
    else {
      $default_fid = isset($element['#default_value']) ? $element['#default_value'] : 0;
      $return = array('fid' => 0);
    }

    // Confirm that the file exists when used as a default value.
    if ($default_fid && $file = file_load($default_fid)) {
      $fid = $file->fid;
    }
  }

  $return['fid'] = $fid;

  return $return;
}

/**
 * An element #process callback for the file_generic field type.
 *
 * Expands the file_generic type to include the description and display fields.
 */
function cropit_field_widget_process($element, &$form_state, $form) {

  //drupal_set_message(print_r($element,true));

  //unset($element['upload']);
  unset($element['upload_button']);
  unset($element['remove_button']);

  $element['fid']['#attributes']['class'] = array('cropit-fid');

  $item = $element['#value'];
  $item['fid'] = $element['fid']['#value'];

  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);
  $settings = $instance['widget']['settings'];

  $element['#theme'] = 'cropit_field_widget';

  // Add the display field if enabled.
  if (!empty($field['settings']['display_field']) && $item['fid']) {
    $element['display'] = array(
      '#type' => empty($item['fid']) ? 'hidden' : 'checkbox',
      '#title' => t('Include file in display'),
      '#value' => isset($item['display']) ? $item['display'] : $field['settings']['display_default'],
      '#attributes' => array('class' => array('file-display')),
    );
  }
  else {
    $element['display'] = array(
      '#type' => 'hidden',
      '#value' => '1',
    );
  }

  // Add the description field if enabled.
  if (!empty($instance['settings']['description_field']) && $item['fid']) {
    $element['description'] = array(
      '#type' => variable_get('file_description_type', 'textfield'),
      '#title' => t('Description'),
      '#value' => isset($item['description']) ? $item['description'] : '',
      '#maxlength' => variable_get('file_description_length', 128),
      '#description' => t('The description may be used as the label of the link to the file.'),
    );
  }

  // Adjust the Ajax settings so that on upload and remove of any individual
  // file, the entire group of file fields is updated together.
  if ($field['cardinality'] != 1) {
    $parents = array_slice($element['#array_parents'], 0, -1);
    $new_path = 'file/ajax/' . implode('/', $parents) . '/' . $form['form_build_id']['#value'];
    $field_element = drupal_array_get_nested_value($form, $parents);
    $new_wrapper = $field_element['#id'] . '-ajax-wrapper';
    foreach (element_children($element) as $key) {
      if (isset($element[$key]['#ajax'])) {
        $element[$key]['#ajax']['path'] = $new_path;
        $element[$key]['#ajax']['wrapper'] = $new_wrapper;
      }
    }
    unset($element['#prefix'], $element['#suffix']);
  }

  // Add another submit handler to the upload and remove buttons, to implement
  // functionality needed by the field widget. This submit handler, along with
  // the rebuild logic in file_field_widget_form() requires the entire field,
  // not just the individual item, to be valid.
  foreach (array('upload_button', 'remove_button') as $key) {
    $element[$key]['#submit'][] = 'file_field_widget_submit';
    $element[$key]['#limit_validation_errors'] = array(array_slice($element['#parents'], 0, -1));
  }

  $widget_settings['preview_image_style'] = 'thumbnail';

  // Add the image preview.
  if ($element['#file'] && $widget_settings['preview_image_style']) {
    $variables = array(
      'style_name' => $widget_settings['preview_image_style'],
      'path' => $element['#file']->uri,
    );

    // Determine image dimensions.
    if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
      $variables['width'] = $element['#value']['width'];
      $variables['height'] = $element['#value']['height'];
    }
    else {
      $info = image_get_info($element['#file']->uri);

      if (is_array($info)) {
        $variables['width'] = $info['width'];
        $variables['height'] = $info['height'];
      }
      else {
        $variables['width'] = $variables['height'] = NULL;
      }
    }

    $element['preview'] = array(
      '#type' => 'markup',
      '#markup' => theme('image_style', $variables),
    );

    // Store the dimensions in the form so the file doesn't have to be accessed
    // again. This is important for remote files.
    $element['width'] = array(
      '#type' => 'hidden',
      '#value' => $variables['width'],
    );
    $element['height'] = array(
      '#type' => 'hidden',
      '#value' => $variables['height'],
    );
  }  

  return $element;
}



//// theme

/**
 * Implements hook_theme().
 */
function cropit_theme() {
  return array(

    'cropit_field_widget' => array(
      'render element' => 'element',
    ),
    'cropit_upload_help' => array(
      'variables' => array('description' => NULL, 'upload_validators' => NULL),
    ),

  );
}

function theme_cropit_field_widget($variables) {

  $element = $variables['element'];
  $output = '';
  $output .= '<div class="image-widget form-managed-file clearfix">';

  if (isset($element['preview'])) {
    $output .= '<div class="image-preview">';
    $output .= drupal_render($element['preview']);
    $output .= '</div>';
  }

  $output .= '<div class="image-widget-data">';
  if ($element['fid']['#value'] != 0) {
    $element['filename']['#markup'] .= ' <span class="file-size">(' . format_size($element['#file']->filesize) . ')</span> ';
  }
  //drupal_set_message(print_r($element,true));
  $output .= drupal_render_children($element);
  $output .= '</div>';
  $output .= '</div>';

  return $output;



  //drupal_set_message('theme_cropit_field_widget');
  //drupal_set_message(print_r($variables,true));

  $element = $variables['element'];
  $output = '';

  //drupal_set_message(print_r($element,true));

  // The "form-managed-file" class is required for proper Ajax functionality.
  $output .= '<div class="file-widget form-managed-file cropit-image-file clearfix">';
  if ($element['fid']['#value'] != 0) {
    // Add the file size after the file name.
    $element['filename']['#markup'] .= ' <span class="file-size">(' . format_size($element['#file']->filesize) . ')</span> ';
  }
  print_r($element);
  $output .= drupal_render_children($element);
 $output .= 'ANDYYY<div class="cropit-image-preview"></div>
 <div class="image-size-label">Resize image</div>
 <input type="range" class="cropit-image-zoom-input">
 <input type="hidden" name="image-data" class="hidden-image-data" />
 <div id="cropclick">click</div>';


  $output .= '</div>';

  return $output;
}

/**
 * Returns HTML for help text based on file upload validators.
 *
 * @param $variables
 *   An associative array containing:
 *   - description: The normal description for this field, specified by the
 *     user.
 *   - upload_validators: An array of upload validators as used in
 *     $element['#upload_validators'].
 *
 * @ingroup themeable
 */
function theme_cropit_upload_help($variables) {
  $description = $variables['description'];
  $upload_validators = $variables['upload_validators'];

  $descriptions = array();

  if (strlen($description)) {
    $descriptions[] = $description;
  }
  if (isset($upload_validators['file_validate_size'])) {
    $descriptions[] = t('Files must be less than !size.', array('!size' => '<strong>' . format_size($upload_validators['file_validate_size'][0]) . '</strong>'));
  }
  if (isset($upload_validators['file_validate_extensions'])) {
    $descriptions[] = t('Allowed file types: !extensions.', array('!extensions' => '<strong>' . check_plain($upload_validators['file_validate_extensions'][0]) . '</strong>'));
  }
  if (isset($upload_validators['file_validate_image_resolution'])) {
    $max = $upload_validators['file_validate_image_resolution'][0];
    $min = $upload_validators['file_validate_image_resolution'][1];
    if ($min && $max && $min == $max) {
      $descriptions[] = t('Images must be exactly !size pixels.', array('!size' => '<strong>' . $max . '</strong>'));
    }
    elseif ($min && $max) {
      $descriptions[] = t('Images must be between !min and !max pixels.', array('!min' => '<strong>' . $min . '</strong>', '!max' => '<strong>' . $max . '</strong>'));
    }
    elseif ($min) {
      $descriptions[] = t('Images must be larger than !min pixels.', array('!min' => '<strong>' . $min . '</strong>'));
    }
    elseif ($max) {
      $descriptions[] = t('Images must be smaller than !max pixels.', array('!max' => '<strong>' . $max . '</strong>'));
    }
  }

  return implode('<br />', $descriptions);
}